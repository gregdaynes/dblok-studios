{
  "name": "grunt-webfont",
  "description": "SVG to webfont converter for Grunt.",
  "version": "0.1.11",
  "homepage": "https://github.com/sapegin/grunt-webfont",
  "author": {
    "name": "Artem Sapegin",
    "url": "http://sapegin.me/"
  },
  "contributors": [
    {
      "name": "Maxime Thirouin",
      "url": "http://moox.io/"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/sapegin/grunt-webfont.git"
  },
  "bugs": {
    "url": "https://github.com/sapegin/grunt-webfont/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/sapegin/grunt-webfont/blob/master/License.md"
    }
  ],
  "main": "tasks/webfont.js",
  "scripts": {
    "test": "grunt"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "temp": "~0.4.0"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-contrib-nodeunit": "~0.2.2",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-jscs-checker": "~0.2.2",
    "stylus": "~0.38.0",
    "matchdep": "~0.3.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "font",
    "fontforge",
    "font-face",
    "woff",
    "ttf",
    "svg",
    "eot",
    "truetype",
    "css",
    "icon"
  ],
  "readme": "# SVG to webfont converter for Grunt [![Build Status](https://travis-ci.org/sapegin/grunt-webfont.png)](https://travis-ci.org/sapegin/grunt-webfont)\n\nGenerate custom icon webfonts from SVG/EPS files via Grunt. Based on [Font Custom](http://endtwist.github.com/fontcustom/).\n\nThis task will make all you need to use font-face icon on your website: font in all needed formats, CSS/SASS/LESS/Stylus and HTML demo page.\n\n## Features\n\n* Very flexible.\n* Semantic: uses [Unicode private use area](http://bit.ly/ZnkwaT).\n* [Cross-browser](http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax/): IE8+.\n* BEM or Bootstrap output CSS style.\n* CSS preprocessors support.\n* Data:uri embedding.\n* Ligatures.\n* HTML preview.\n\n\n## Installation\n\nThis plugin requires Grunt 0.4.\n\n### OS X\n\n```\nbrew install fontforge ttfautohint\nnpm install grunt-webfont --save-dev\n```\n\nYou may need to use `sudo` for `brew`, depending on your setup.\n\n### Linux\n\n```\nsudo apt-get install fontforge ttfautohint\nnpm install grunt-webfont --save-dev\n```\n\n*Note that if `ttfautohint` is not available in your distribution, your generated font will not be properly hinted.*\n\n\n## Configuration\n\nAdd somewhere in your `Gruntfile.js`:\n\n```javascript\ngrunt.loadNpmTasks('grunt-webfont');\n```\n\nInside your `Gruntfile.js` file add a section named `webfont`. See Parameters section below for details.\n\n\n### Parameters\n\n#### src\n\nType: `string|array`\n\nGlyphs list: SVG or EPS. String or array. Wildcards are supported.\n\n#### dest\n\nType: `string`\n\nDirectory for resulting files.\n\n#### destCss\n\nType: `string` Default: _`dest` value_\n\nDirectory for resulting CSS files (if different than font directory).\n\n#### Options\n\n#### font\n\nType: `string` Default: `icons`\nName of font and base name of font files.\n\n#### hashes\n\nType: `boolean` Default: `true`\n\nAppend font file names with unique string to flush browser cache when you update your icons.\n\n#### styles\n\nType: `string|array` Default: `'font,icon'`\n\nList of styles to be added to CSS files: `font` (`font-face` declaration), `icon` (base `.icon` class), `extra` (extra stuff for Bootstrap (only for `syntax` = `'bootstrap'`).\n\n#### types\n\nType: `string|array` Default: `'woff,ttf,eot,svg'`\n\nFont files types to generate.\n\n#### syntax\n\nType: `string` Default: `bem`\n\nIcon classes syntax. `bem` for double class names: `icon icon_awesome` or `bootstrap` for single class names: `icon-awesome`.\n\n#### template\n\nType: `string` Default: `null`\n\nCustom CSS template path (see `tasks/templates` for some examples). Should be used instead of `syntax`. (You probably need to define `htmlDemoTemplate` option too.)\n\n#### stylesheet  (default: `'css'`)\n\nType: `string`\n\nStylesheet type. Can be css, sass, scss, less... If `sass` or `scss` is used, `_` will prefix the file (so it can be a used as a partial).\n\n#### relativeFontPath  (default: null)\n\nType: `string`\n\nCustom font path. Will be used instead of `destCss` *in* CSS file. Useful with CSS preprocessors.\n\n#### htmlDemo\n\nType: `boolean` Default: `true`\n\nIf `true`, an HTML file will be available (by default, in `destCSS` folder) to test the render.\n\n#### htmlDemoTemplate\n\nType: `string` Default: `null`\n\nCustom demo HTML template path (see `tasks/templates/demo.html` for an example) (requires `htmlDemo` option to be true).\n\n#### destHtml\n\nType: `string` Default: _`destCss` value_\n\nCustom demo HTML demo path (requires `htmlDemo` option to be true).\n\n#### embed\n\nType: `string|array` Default: `false`\n\nIf `true` embeds WOFF (*only WOFF*) file as data:uri.\n\nIF `ttf` or `woff` or `ttf,woff` embeds TTF or/and WOFF file.\n\nIf there’re more file types in `types` option they will be included as usual `url(font.type)` CSS links.\n\n#### ligatures\n\nType: `boolean` Default: `false`\n\nIf `true` the generated font files and stylesheets will be generated with opentype ligature features. The character sequences to be replaced by the ligatures are determined by the file name (without extension) of the original SVG or EPS.\n\nFor example, you have a heart icon in `love.svg` file. The HTML `<h1>I <span class=\"ligature-icons\">love</span> you!</h1>` will be rendered as `I ♥ you!`.\n\n#### rename\n\nType: `function` Default: `path.basename`\n\nYou can use this function to change how file names translates to class names (the part after `icon_` or `icon-`). By default it’s a name of a file.\n\nFor example you can group your icons into several folders and add folder name to class name:\n\n```js\noptions: {\n  rename: function(name) {\n    // .icon_entypo-add, .icon_fontawesome-add, etc.\n    return [path.basename(path.dirname(name)), path.basename(name)].join('-');\n  }\n}\n```\n\n#### skip\n\nType: `boolean` Default: `false`\n\nIf `true` task will not be ran. In example, you can skip task on Windows (becase of difficult installation):\n\n``` javascript\nskip: require('os').platform() === 'win32'\n```\n\n### Config Examples\n\n#### Simple font generation\n\n``` javascript\nwebfont: {\n  icons: {\n    src: 'icons/*.svg',\n    dest: 'build/fonts'\n  }\n}\n```\n\n#### Custom font name, fonts and CSS in different folders\n\n``` javascript\nwebfont: {\n  icons: {\n    src: 'icons/*.svg',\n    dest: 'build/fonts',\n    destCss: 'build/fonts/css'\n    options: {\n      font: 'ponies'\n    }\n  }\n}\n```\n\n#### To use with CSS preprocessor\n\n``` javascript\nwebfont: {\n  icons: {\n    src: 'icons/*.svg',\n    dest: 'build/fonts',\n    destCss: 'build/styles',\n    options: {\n      stylesheet: 'styl',\n      relativeFontPath: '/build/fonts'\n    }\n  }\n}\n```\n\n#### Embedded font file\n\n``` javascript\nwebfont: {\n  icons: {\n    src: 'icons/*.svg',\n    dest: 'build/fonts',\n    options: {\n      types: 'woff',\n      embed: true\n    }\n  }\n}\n```\n\n\n## CSS Preprocessors Caveats\n\nYou can change CSS file syntax using `stylesheet` option (see above). It change file extension (so you can specify any) with some tweaks. Replace all comments with single line comments (which will be removed after compilation).\n\n### SASS\n\nIf `stylesheet` option is `sass` or `scss`, `_` will prefix the file (so it can be a used as a partial).\n\n### LESS\n\nIf `stylesheet` option is `less`, regular CSS icon classes will be expanded with corresponding LESS mixins.\n\nThe LESS mixins then may be used like so:\n\n```css\n.profile-button {\n  .icon-profile;\n}\n```\n\n\n## Release History\n\n### 2013-10-23 v0.1.11\n\n* Autohint for all formats (by [@borodean](https://github.com/borodean)).\n\n### 2013-10-16 v0.1.10\n\n* `rename` option.\n* Quote Base64 strings to prevent errors in Stylus.\n\n### 2013-09-22 v0.1.9\n\n* Fix handling pathes with spaces.\n* Font smoothing for Firefox on OS X (by [@MoOx](https://github.com/MoOx)).\n* Deprecated `md5` Pyhton module replaced with `hashlib` (by [@Nyalab](https://github.com/Nyalab)).\n\n### 2013-08-21 v0.1.8\n\n* Set glyphs width automatically.\n\n### 2013-08-21 v0.1.7\n\n* Ligatures (by [@prehnRA](https://github.com/prehnRA)).\n\n### 2013-08-20 v0.1.6\n\n* Bug fixes.\n\n### 2013-06-30 v0.1.5\n\n* `destHtml` option (by [@timhettler](https://github.com/timhettler)).\n* Improved kerning (by [@frekw](https://github.com/frekw)).\n\n### 2013-05-08 v0.1.4\n\n* `htmlDemoTemplate` option (by [@andreu86](https://github.com/andreu86)).\n* Various bug fixes and tweaks (thanks [@MoOx](https://github.com/MoOx), [@iham](https://github.com/iham), [@timhettler](https://github.com/timhettler)).\n\n### 2013-04-30 v0.1.3\n\n* HTML demo works with CSS preprocessors stylesheets.\n* TTF files embedding (by [@katzlbt](https://github.com/katzlbt) and me).\n* Don not stop Grunt when font contains no glyphs (by [@iham](https://github.com/iham)).\n* Better fontforge stdout handling (by [@MoOx](https://github.com/MoOx)).\n\n### 2013-04-13 v0.1.2\n\n* `relativeFontPath` option (by [@gregvanbrug](https://github.com/gregvanbrug)).\n* `template` option.\n* Better LESS support (by [@gregvanbrug](https://github.com/gregvanbrug)).\n* Better Stylus support.\n* Bug fixes.\n\n### 2013-03-17 v0.1.1\n\n* Fix error when generating font with one glyph.\n\n### 2013-02-18 v0.1.0\n\n* Grunt 0.4 support.\n* Separate CSS/font destinations (by [@scanieso](https://github.com/scanieso)).\n* Minimal CSS preprocessors support (by [@MoOx](https://github.com/MoOx)).\n* Updated generator script (by [@MoOx](https://github.com/MoOx) and me).\n* Generated CSS not include broken links to font files.\n* Data:uri WOFF files embedding.\n\n\n---\n\n## License\n\nThe MIT License, see the included `License.md` file.\n",
  "readmeFilename": "Readme.md",
  "_id": "grunt-webfont@0.1.11",
  "dist": {
    "shasum": "aa39211150cc3e267990a3f20580dd8d47246a22"
  },
  "_from": "grunt-webfont@",
  "_resolved": "https://registry.npmjs.org/grunt-webfont/-/grunt-webfont-0.1.11.tgz"
}
